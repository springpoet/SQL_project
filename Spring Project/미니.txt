안녕하세요 1조 SQL에 이어 스프링 발표를 맡게 되었습니다.
목차입니다. 프로젝트 소개와 팀원소개, 프로젝트 수행 과정, 개선 사항, 자체 평가 순으로 발표하겠습니다.
주제 선정 이유입니다.  저희가 지난 SQL프로젝트를 진행할때는 6월까지의 여행자 수만 조사했었는데 최근 다시 조회한 결과 수가 줄지 않고 2배 가량 더 늘어난 모습을 볼 수 있습니다. 그렇기 떄문에 항공편과 이를 관리해주는 사이트의 필요성이 증가할거라 생각해 주제를 바꾸지 않았습니다. 
다음은 활용 도구들입니다. 이클립스 스프링 디쓰리를 활용했습니다.
팀원 소개입니다. 먼저 안서준님은 view 부분, 파이썬 코드, css html 코드를 작성해주었고 장태연님은 mvc 설계와 컨트롤러와 모델 부분 그리고 데이터베이스 쿼리를 작성하였고 저는 컨트롤러 부분과 d3 연동 코드를 작성하고 피피티와 발표를 맡았습니다.
프로젝트 수행 과정입니다.
지난번에 준비할때는 데이터양이 너무 적다고 생각해 처음부터 공공 데이터 포탈에서 국제선 항공기 정보를 가져와 db에 추가하였습니다.
이 화면이 저희의 메인페이지 입니다. 다들 아시다시피 저희가 이클립스의 메인페이지에서 실행을 할 경우 아무것도 안뜨고 주소창에 MainPage를 입력해야 메인 페이지가 뜨게됩니다. 이것은 컨트롤러에서 메인페이지에 해당하는 get 과정을 실행해서 MainPage를 띄워주는 것입니다. 저희는 기능들의 구현 방식이 거의 유사하기 때문에 한 과정만 설명하고 나머지 기능들은 간략히 설명하겠습니다. 해당 화면에서 구현한 기능은 회원가입, 로그인, 입력한 정보와 같은 조건의 항공권 검색이 가능한 기능이 있습니다. 저는 여기서 항공권 조회를 누르는 순간부터 다음 페이지인 예약 페이지가 뜨는 과정을 설명하겠습니다. 
먼저 메인페이지의 post 과정이 있습니다. if문은 앞에서 날짜를 공백으로 뒀을 경우 다시 메인페이지를 실행하는 과정이라 무시하셔도 되고 else부분을 보시면 redirect book하고 물음표가 있습니다. 이런식으로 주소끝에 물음표뒤에 매개변수를 포함시켜 전송시킬수있습니다. 다음은 book에서의 get이 있습니다. 앞에서 보낸 값들을 당연히 매개변수로 받아야합니다. 여기서 우리는 매개변수들을 이용해 맵형식의 리스트를 만들겁니다.
 3,4 단계는 리스트를 만드는 과정입니다. 3단계는 단순히 인터페이스의 메소드를 실행하는 과정이고 4단계는 dao에서 매개변수를 이용한 쿼리문을 반환받아 리스트에 저장하는 것입니다. 이렇게 저장한 맵형식의 리스트를 book페이지에서 데이터로 활용하는것입니다. 
 잘 안보이겠지만 주소창을보면 ?뒤에 depart=PUS 그리고 arrive=FUK 그리고 publeyear는 2022년 11월 11일이 적혀있습니다. 는 뒤에 붙은 값들은 모두 제가 앞의 메인페이지에서 직접 입력한 값들입니다. 따라서 밑에 출력된 티켓들을 보시면 전부 출발공항이 PUS, 도착공항이 FUK 그리고 11월 11일에 출발하는 비행기들이 나오걸 볼 수 있습니다. 여기까지가 검색을 눌렀을 때 이뤄지는 한 과정이었습니다. 이후에는 각 기능만 소개하고 넘어 가겠습니다. 
먼저 회원가입입니다. 해당 화면에서 입력한 정보를 db의 멤버 함수에 저장을 하고 이후 로그인할때 사용합니다. 이미 사용중인 아이디로 가입할 시 에러 문구가 뜹니다.
다음은 로그인입니다. 이전에 회원가입시 저장된 아이디와 비밀번호를 가져와 일치할 경우 로그인이 완료됩니다. 실패하면 다시 이 페이지를 실행합니다.
로그아웃입니다. 로그인 상태에서만 뜨는 로그아웃 버튼을 클릭하면 저장된 세션을 완전히 삭제하는 세션 인벨리데이트를 실행합니다.
다음은 마이페이지입니다. 로그인 상태에서만 가능하며 로그인한 사람의 정보와 해당 아이디로 예매를 한 티켓을 확인할 수 있습니다.
다음은 관리자 페이지입니다.  admin이라는 아이디로 로그인 했을 경우 뜨는 창입니다. 이어서 관리자 마이페이지입니다. 관리자의 정보와 모든 예약 정보 조회 및 삭제 기능을 구현했습니다.
마지막으로 d3입니다. 앞에서 보신 그래프입니다. 해당 데이터는 공공데이터에서 내외국인 출국자 수를 가져와 db에 넣고 jsp로 표현한 걸 캡쳐한 것입니다.
다음은 개선사항 입니다.
다들 해보셔서 알겠지만 저희도 조금 써볼까 싶으면 빨간줄 생기고 아무것도 안하고 클린, 리프레쉬만 해도 에러가 사라지는 이상한 시행착오가 많았습니다. 그래서 너무 많아가지고 고르는게 더 어려워 그냥 시행착오를 빼고 개선 사항으로만 했습니다. 이번 프로젝트가 처음에 엄청 더디다가 갈수록 속도가 붙는 프로젝트 같이 느껴졌는데 프로젝트가 끝날때쯤되니 이렇게 하면 더 좋을거같다는 생각이 많이 들었습니다. 시간이 조금 더 있었으면 추가했을 기능들을 넣어봤습니다. 
첫번째는 입력한 조건에 해당하는 티켓이 없는 경우 다시 입력창으로 되돌아 오는 기능입니다. 두번째는 페이징 처리입니다. 한 사람이 많은 티켓을 예매하거나 관리자의 마이페이지에서 조회를 했을 경우 티켓이 엄청 많이 나오는데 이를 페이징 처리를 했다면 더 보기 좋았을것같습니다.
세번째는 미로그인 상태에서 예매시 일어나는 500페이지 오류입니다. 로그인을 안한 상태면 예매하기 버튼을 비활성화 했어야 했는데 하지 못했습니다. 마지막으로 파일 분류입니다. 끝나고 보니 저희가 하나의 컨트롤러로만 관리를 해왔습니다. 용도 또는 사용되는 페이지에 따라 다른 컨트롤러를 만들었다면 더 편했을거라 생각합니다.
마지막으로 자체 평가 입니다.
이상 1조 발표였습니다 감사합니다.